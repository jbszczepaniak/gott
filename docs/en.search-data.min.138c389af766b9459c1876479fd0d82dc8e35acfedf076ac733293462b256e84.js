'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/gott/docs/episodes/','title':"Episodes",'content':""});index.add({'id':1,'href':'/gott/01-static-types-without-burocreacy/','title':"01 - static types without burocreacy",'content':""});index.add({'id':2,'href':'/gott/02-there-is-no-finally/','title':"02 - there is no finally",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':3,'href':'/gott/03-dont-raise/','title':"03 - don't raise",'content':" You donâ€™t raise or throw exceptions, you return errors. get pdf here ðŸ–¨ There is a lot of code blocks like this in go:\nfileInfo, err := os.Stat(filename) if err != nil { return fmt.Errorf(\u0026#34;could not stat file, err: %v\u0026#34;, err) } Each time you encounter a possibility of error you handle it immediately. You return it and let caller deal with it or you just log it and move on.\nIn golang errors are normal variables, â€‹error â€‹type is an interface with single method â€‹Error()â€‹. â€‹Error()â€‹ â€‹returns description of what happened.\nAlthough you can define your own errors, more frequently people just use built-in ones and use messages to describe abnormal situations.\nBut If you want to check what type of error did you get, you can do it with technique called â€‹type assertionâ€‹:\nfunc someFunc() error { return \u0026amp;SomeError{} //Some defined earlier error } func main() { err := someFunc() if err != nil { _, ok := err.(*SomeError) if ok { fmt.Println(\u0026#34;This is SomeError for sure\u0026#34;) } } } If this looks confusing do not worry, we will talk about type assertions in the future!\n"});index.add({'id':4,'href':'/gott/04-kind-of-object-oriented/','title':"04 - kind of object-oriented",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':5,'href':'/gott/05-interfaces/','title':"05 - interfaces",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':6,'href':'/gott/06-functions/','title':"06 - functions",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':7,'href':'/gott/07-the-mascot/','title':"07 - the mascot",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':8,'href':'/gott/08-janury-2nd-2006/','title':"08 - janury 2nd 2006",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':9,'href':'/gott/10-do-not-communicate-by-sharing-memory/','title':"10 - do not communicate by sharing memory",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':10,'href':'/gott/11-concurrency-is-not-parallelism/','title':"11 - concurrency is not parallelism",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':11,'href':'/gott/12-select-is-not-only-sql-thing/','title':"12 - select is not only sql thing",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':12,'href':'/gott/13-functions-implementing-interfaces/','title':"13 - functions implementing interfaces",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':13,'href':'/gott/14-tba/','title':"14 - tba",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':14,'href':'/gott/9-be-safe/','title':"9 - be safe",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':15,'href':'/gott/categories/','title':"categories",'content':""});index.add({'id':16,'href':'/gott/docs/','title':"docs",'content':""});index.add({'id':17,'href':'/gott/','title':"introduction",'content':""});index.add({'id':18,'href':'/gott/tags/','title':"tags",'content':""});})();