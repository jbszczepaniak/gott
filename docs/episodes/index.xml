<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Episodes on Go on the toilet</title>
    <link>https://jbszczepaniak.github.io/gott/episodes/</link>
    <description>Recent content in Episodes on Go on the toilet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jbszczepaniak.github.io/gott/episodes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>#16 - Optional parameters</title>
      <link>https://jbszczepaniak.github.io/gott/episodes/episode16/</link>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jbszczepaniak.github.io/gott/episodes/episode16/</guid>
      <description>They exist.</description>
    </item>
    
    <item>
      <title>#15 - Looping over channel</title>
      <link>https://jbszczepaniak.github.io/gott/episodes/episode15/</link>
      <pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jbszczepaniak.github.io/gott/episodes/episode15/</guid>
      <description>Let&amp;rsquo;s find out how it works under the hood.</description>
    </item>
    
    <item>
      <title>#14 - Handling OS signals</title>
      <link>https://jbszczepaniak.github.io/gott/episodes/episode14/</link>
      <pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jbszczepaniak.github.io/gott/episodes/episode14/</guid>
      <description>gracefully</description>
    </item>
    
    <item>
      <title>#13 - About functions implementing interfaces</title>
      <link>https://jbszczepaniak.github.io/gott/episodes/episode13/</link>
      <pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jbszczepaniak.github.io/gott/episodes/episode13/</guid>
      <description>Did you know that any type can implement an interface?</description>
    </item>
    
    <item>
      <title>#12 - Select is not only SQL thing</title>
      <link>https://jbszczepaniak.github.io/gott/episodes/episode12/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jbszczepaniak.github.io/gott/episodes/episode12/</guid>
      <description>The &lt;code&gt;select&lt;/code&gt; statement in go gives the ability to listen on many channels at the same time.</description>
    </item>
    
    <item>
      <title>#11 - Concurrency is not parallelism</title>
      <link>https://jbszczepaniak.github.io/gott/episodes/episode11/</link>
      <pubDate>Mon, 26 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jbszczepaniak.github.io/gott/episodes/episode11/</guid>
      <description>First two-sides episode!</description>
    </item>
    
    <item>
      <title>#10 - Do not communicate by sharing memory; instead, share memory by communicating</title>
      <link>https://jbszczepaniak.github.io/gott/episodes/episode10/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jbszczepaniak.github.io/gott/episodes/episode10/</guid>
      <description>Said no gopher ever</description>
    </item>
    
    <item>
      <title>#09 - Golang wants you to be safe</title>
      <link>https://jbszczepaniak.github.io/gott/episodes/episode09/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jbszczepaniak.github.io/gott/episodes/episode09/</guid>
      <description>One of the most powerful features of go is it&amp;rsquo;s concurrency model built around goroutines and channels.</description>
    </item>
    
    <item>
      <title>#08 - Do you remember January 2nd, 2006?</title>
      <link>https://jbszczepaniak.github.io/gott/episodes/episode08/</link>
      <pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jbszczepaniak.github.io/gott/episodes/episode08/</guid>
      <description>What a day&amp;hellip;</description>
    </item>
    
    <item>
      <title>#07 - Let&#39;s talk about the mascot of go</title>
      <link>https://jbszczepaniak.github.io/gott/episodes/episode07/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jbszczepaniak.github.io/gott/episodes/episode07/</guid>
      <description> get pdf here ðŸ–¨ </description>
    </item>
    
    <item>
      <title>#06 - Functions are first-class citizens.</title>
      <link>https://jbszczepaniak.github.io/gott/episodes/episode06/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jbszczepaniak.github.io/gott/episodes/episode06/</guid>
      <description>Let&amp;rsquo;s build a decorator to prove it.</description>
    </item>
    
    <item>
      <title>#05 - Are there interfaces in go?</title>
      <link>https://jbszczepaniak.github.io/gott/episodes/episode05/</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jbszczepaniak.github.io/gott/episodes/episode05/</guid>
      <description>TLDR;yes</description>
    </item>
    
    <item>
      <title>#02 - There is no finally. In go you defer stuff.</title>
      <link>https://jbszczepaniak.github.io/gott/episodes/episode02/</link>
      <pubDate>Thu, 31 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jbszczepaniak.github.io/gott/episodes/episode02/</guid>
      <description>defer everything</description>
    </item>
    
    <item>
      <title>#03 - You donâ€™t raise or throw exceptions, you return errors</title>
      <link>https://jbszczepaniak.github.io/gott/episodes/episode03/</link>
      <pubDate>Thu, 31 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jbszczepaniak.github.io/gott/episodes/episode03/</guid>
      <description>In golang errors are normal variables</description>
    </item>
    
    <item>
      <title>#04 - Go is kind of object-oriented.</title>
      <link>https://jbszczepaniak.github.io/gott/episodes/episode04/</link>
      <pubDate>Thu, 31 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jbszczepaniak.github.io/gott/episodes/episode04/</guid>
      <description>Look-n-feel of the struct with function defined on it is class-like.</description>
    </item>
    
    <item>
      <title>#01 - Go gives you static types without bureaucracy!</title>
      <link>https://jbszczepaniak.github.io/gott/episodes/episode01/</link>
      <pubDate>Sun, 30 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jbszczepaniak.github.io/gott/episodes/episode01/</guid>
      <description>No bureaucracy at all!</description>
    </item>
    
  </channel>
</rss>