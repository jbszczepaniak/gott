'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/gott/docs/episodes/','title':"Episodes",'content':""});index.add({'id':1,'href':'/gott/docs/episodes/episode01/','title':"01 - Static types without burocreacy",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':2,'href':'/gott/docs/episodes/episode02/','title':"02 - There is no finally",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':3,'href':'/gott/docs/episodes/episode03/','title':"03 - Don't raise",'content':" Download it here.\nYou don’t raise or throw exceptions, you return errors. There is a lot of code blocks like this in go:\nfileInfo, err := os.Stat(filename) if err != nil { return fmt.Errorf(\u0026#34;could not stat file, err: %v\u0026#34;, err) } Each time you encounter a possibility of error you handle it immediately. You return it and let caller deal with it or you just log it and move on.\nIn golang errors are normal variables, ​error ​type is an interface with single method ​Error()​. ​Error()​ ​returns description of what happened.\nAlthough you can define your own errors, more frequently people just use built-in ones and use messages to describe abnormal situations.\nBut If you want to check what type of error did you get, you can do it with technique called ​type assertion​:\nfunc someFunc() error { return \u0026amp;SomeError{} //Some defined earlier error } func main() { err := someFunc() if err != nil { _, ok := err.(*SomeError) if ok { fmt.Println(\u0026#34;This is SomeError for sure\u0026#34;) } } } If this looks confusing do not worry, we will talk about type assertions in the future!\n"});index.add({'id':4,'href':'/gott/docs/episodes/episode04/','title':"04 - Kind of object-oriented",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':5,'href':'/gott/docs/episodes/episode05/','title':"05 - Interfaces",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':6,'href':'/gott/docs/episodes/episode06/','title':"06 - Functions",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':7,'href':'/gott/docs/episodes/episode07/','title':"07 - The mascot",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':8,'href':'/gott/docs/episodes/episode08/','title':"08 - Janury 2nd 2006",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':9,'href':'/gott/docs/episodes/episode09/','title':"09 - Be safe",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':10,'href':'/gott/docs/episodes/episode10/','title':"10 - Don't communicate by sharing memory",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':11,'href':'/gott/docs/episodes/episode11/','title':"11 - Concurrency is not parallelism",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':12,'href':'/gott/docs/episodes/episode12/','title':"12 - Select is not only SQL thing",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':13,'href':'/gott/docs/episodes/episode13/','title':"13 - Functions implementing interfaces",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':14,'href':'/gott/docs/episodes/episode14/','title':"14 - TBA",'content':"This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n \n"});index.add({'id':15,'href':'/gott/categories/','title':"Categories",'content':""});index.add({'id':16,'href':'/gott/docs/','title':"Docs",'content':""});index.add({'id':17,'href':'/gott/','title':"Introduction",'content':" Go on the toilet  Download the newest episode Print it x times Hang it on toilet in your company Enjoy  "});index.add({'id':18,'href':'/gott/tags/','title':"Tags",'content':""});})();